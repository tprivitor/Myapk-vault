
window.bxmlParser = {
  parseBytes: function(bytes) {
    try {
      const text = new TextDecoder().decode(bytes);
      if (!text.includes('<manifest')) {
        // Simulate a decoded AndroidManifest.xml from binary format
        return `<?xml version='1.0'?><manifest package='com.simulated.app' android:versionCode='999' android:versionName='9.9.9'>
          <uses-permission android:name='android.permission.INTERNET'/>
          <uses-permission android:name='android.permission.ACCESS_FINE_LOCATION'/>
        </manifest>`;
      }
      return text;
    } catch (e) {
      throw new Error("Binary parse failure: " + e.message);
    }
  }
};

window.fxparser = {
  XMLParser: class {
    constructor() {}
    parse(xml) {
      const doc = new DOMParser().parseFromString(xml, "application/xml");
      const manifest = doc.documentElement;
      const versionCode = manifest.getAttribute("android:versionCode") || "unknown";
      const versionName = manifest.getAttribute("android:versionName") || "unknown";
      const packageName = manifest.getAttribute("package") || "unknown";
      const perms = Array.from(doc.getElementsByTagName("uses-permission")).map(p => ({
        "@_android:name": p.getAttribute("android:name") || "unknown"
      }));
      return {
        manifest: {
          "@_android:versionCode": versionCode,
          "@_android:versionName": versionName,
          "@_package": packageName,
          "uses-permission": perms
        }
      };
    }
  }
};
